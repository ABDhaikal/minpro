generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(cuid())
  username     String
  email        String    @unique
  password     String
  profilePict  String?
  role         Role      @default(USER)
  referralCode String    @unique
  updateAt     DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  // relation
  transaction   Transaction[]
  cuponDiscount CuponDiscount[]
  Cart          Cart[]
  Organizer     Organizer?
  usersEvents   usersEvents[]
  UserPoint     UserPoint?

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model UserPoint {
  id        String    @id @default(cuid()) //primary key
  userId    String    @unique
  amount    Int       @default(0)
  expiredAt DateTime?
  updateAt  DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // relation
  users User @relation(fields: [userId], references: [id])

  @@map("users_points")
}

model Transaction {
  id                    String            @id @default(cuid())
  reciptNumber          String            @unique @default(uuid())
  userId                String
  status                TransactionStatus @default(WAITING_FOR_PAYMENT)
  pointsUsed            Int
  totalDecreaseDiscount Int
  totalPercentDiscount  Int
  totalPrice            Int
  paymentDeadline       DateTime
  paymentProof          String?
  organizerDeadline     DateTime?
  transactionDetail     String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  deletedAt             DateTime?

  // relation
  users              User                 @relation(fields: [userId], references: [id])
  notifications      Notification?
  cuponTransactions  CuponTransaction[]
  voucherTransaction VoucherTransaction[]
  transactionTicket  transactionTicket[]

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model Notification {
  id            String   @id @default(cuid()) // Primary Key
  transactionId String   @unique
  message       String
  isRead        Boolean  @default(false) // Defaults to unread
  createdAt     DateTime @default(now())

  // relation
  transactions Transaction @relation(fields: [transactionId], references: [id])

  @@map("notifications")
}

model CuponDiscount {
  id        String       @id @default(cuid()) // Primary Key
  userId    String
  type      DiscountType
  amount    Int
  quantity  Int          @default(1)
  used      Int          @default(0)
  expiredAt DateTime
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?

  // relation
  users             User               @relation(fields: [userId], references: [id])
  cuponTransactions CuponTransaction[]

  @@map("cupon_discounts")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model CuponTransaction {
  id              String       @id @default(cuid()) // Primary Key
  transactionId   String
  cuponDiscountId String
  type            DiscountType
  amount          Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // relation
  transactions  Transaction   @relation(fields: [transactionId], references: [id])
  CuponDiscount CuponDiscount @relation(fields: [cuponDiscountId], references: [id])

  @@map("cupon_transactions")
}

model Organizer {
  id               String    @id @default(cuid()) //primary key
  userId           String    @unique
  name             String    @unique
  slug             String    @unique
  organizerPicture String?
  description      String
  bankTarget       String
  paymentTarget    Int
  updatedAt        DateTime  @updatedAt
  createdAt        DateTime  @default(now())
  deletedAt        DateTime?

  //relation
  events Event[]
  users  User    @relation(fields: [userId], references: [id])

  @@map("organizers")
}

model Event {
  id          String      @id @default(cuid()) //primary key
  organizerId String
  category    Category
  name        String      @unique
  slug        String      @unique
  image       String
  description String
  location    Location
  status      StatusEvent @default(DRAFT)
  eventStart  DateTime
  eventEnd    DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?

  //relation
  organizers   Organizer      @relation(fields: [organizerId], references: [id])
  eventVoucher EventVoucher[]
  tickets      Ticket[]
  usersEvents  usersEvents[]

  @@map("events")
}

enum Category {
  Sports
  Festivals
  Concerts
  Theater
}

enum Location {
  ACEH
  SUMATERA_UTARA
  SUMATERA_BARAT
  RIAU
  JAMBI
  SUMATERA_SELATAN
  BENGKULU
  LAMPUNG
  KEPULAUAN_BANGKA_BELITUNG
  KEPULAUAN_RIAU
  DKI_JAKARTA
  JAWA_BARAT
  JAWA_TENGAH
  DI_YOGYAKARTA
  JAWA_TIMUR
  BANTEN
  BALI
  NUSA_TENGGARA_BARAT
  NUSA_TENGGARA_TIMUR
  KALIMANTAN_BARAT
  KALIMANTAN_TENGAH
  KALIMANTAN_SELATAN
  KALIMANTAN_TIMUR
  KALIMANTAN_UTARA
  SULAWESI_UTARA
  SULAWESI_TENGAH
  SULAWESI_SELATAN
  SULAWESI_TENGGARA
  GORONTALO
  SULAWESI_BARAT
  MALUKU
  MALUKU_UTARA
  PAPUA
  PAPUA_BARAT
  PAPUA_TENGAH
  PAPUA_PEGUNUNGAN
  PAPUA_SELATAN
  PAPUA_BARAT_DAYA
}

enum StatusEvent {
  EXPIRED
  PUBLISH
  DRAFT
}

model Ticket {
  id        String    @id @default(cuid()) //primary key
  eventId   String
  name      String
  price     Float     @default(0)
  amount    Int
  buyed     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //relation
  events            Event               @relation(fields: [eventId], references: [id])
  transactionTicket transactionTicket[]
  Cart              Cart[]
  userEventTicket   userEventTicket[]

  @@map("tickets")
}

model EventVoucher {
  id             String    @id @default(cuid()) //primary key
  eventId        String
  name           String
  amountDiscount Int
  quota          Int
  used           Int
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  //relation
  events             Event                @relation(fields: [eventId], references: [id])
  VoucherTransaction VoucherTransaction[]

  @@map("events_vouchers")
}

// start here

model VoucherTransaction {
  id             String    @id @default(cuid())
  transactionId  String
  eventVoucherId String
  createdAt      DateTime  @default(now())
  deleteAt       DateTime?

  //relation
  transaction  Transaction  @relation(fields: [transactionId], references: [id])
  eventVoucher EventVoucher @relation(fields: [eventVoucherId], references: [id])

  @@map("vouchers_transactions")
}

model transactionTicket {
  id            String    @id @default(cuid()) //primary key
  transactionId String
  ticketId      String
  quantity      Int
  price         Float
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?

  // relation
  transactions Transaction @relation(fields: [transactionId], references: [id])
  tickets      Ticket      @relation(fields: [ticketId], references: [id])

  @@map("transactions_tickets")
}

model Cart {
  id        String   @id @default(cuid()) //primary key
  userId    String
  ticketId  String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  users   User   @relation(fields: [userId], references: [id])
  tickets Ticket @relation(fields: [ticketId], references: [id])

  @@map("carts")
}

model usersEvents {
  id        String    @id @default(cuid()) //primary key
  userId    String
  eventId   String
  review    String?
  rating    Int?
  updateAt  DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // relation
  users           User              @relation(fields: [userId], references: [id])
  userEventTicket userEventTicket[]
  events          Event             @relation(fields: [eventId], references: [id])

  @@map("users_events")
}

model userEventTicket {
  id          String    @id @default(cuid()) //primary key
  userEventId String
  ticketId    String
  quantity    Int
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?

  // relation
  tickets     Ticket      @relation(fields: [ticketId], references: [id])
  usersEvents usersEvents @relation(fields: [userEventId], references: [id])

  @@map("users_event_tickets")
}
